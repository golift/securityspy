// Code generated by MockGen. DO NOT EDIT.
// Source: golift.io/securityspy/server (interfaces: API)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	http "net/http"
	url "net/url"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockAPI) Auth() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth")
	ret0, _ := ret[0].(string)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockAPIMockRecorder) Auth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAPI)(nil).Auth))
}

// BaseURL mocks base method.
func (m *MockAPI) BaseURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// BaseURL indicates an expected call of BaseURL.
func (mr *MockAPIMockRecorder) BaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseURL", reflect.TypeOf((*MockAPI)(nil).BaseURL))
}

// Get mocks base method.
func (m *MockAPI) Get(arg0 string, arg1 url.Values) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAPIMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAPI)(nil).Get), arg0, arg1)
}

// GetClient mocks base method.
func (m *MockAPI) GetClient(arg0 string, arg1 url.Values, arg2 *http.Client) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0, arg1, arg2)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockAPIMockRecorder) GetClient(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockAPI)(nil).GetClient), arg0, arg1, arg2)
}

// GetContext mocks base method.
func (m *MockAPI) GetContext(arg0 context.Context, arg1 string, arg2 url.Values) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContext indicates an expected call of GetContext.
func (mr *MockAPIMockRecorder) GetContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockAPI)(nil).GetContext), arg0, arg1, arg2)
}

// GetContextClient mocks base method.
func (m *MockAPI) GetContextClient(arg0 context.Context, arg1 string, arg2 url.Values, arg3 *http.Client) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContextClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextClient indicates an expected call of GetContextClient.
func (mr *MockAPIMockRecorder) GetContextClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextClient", reflect.TypeOf((*MockAPI)(nil).GetContextClient), arg0, arg1, arg2, arg3)
}

// GetXML mocks base method.
func (m *MockAPI) GetXML(arg0 string, arg1 url.Values, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetXML", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetXML indicates an expected call of GetXML.
func (mr *MockAPIMockRecorder) GetXML(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXML", reflect.TypeOf((*MockAPI)(nil).GetXML), arg0, arg1, arg2)
}

// HTTPClient mocks base method.
func (m *MockAPI) HTTPClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// HTTPClient indicates an expected call of HTTPClient.
func (mr *MockAPIMockRecorder) HTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPClient", reflect.TypeOf((*MockAPI)(nil).HTTPClient))
}

// Post mocks base method.
func (m *MockAPI) Post(arg0 string, arg1 url.Values, arg2 io.ReadCloser) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockAPIMockRecorder) Post(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockAPI)(nil).Post), arg0, arg1, arg2)
}

// SimpleReq mocks base method.
func (m *MockAPI) SimpleReq(arg0 string, arg1 url.Values, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimpleReq", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SimpleReq indicates an expected call of SimpleReq.
func (mr *MockAPIMockRecorder) SimpleReq(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimpleReq", reflect.TypeOf((*MockAPI)(nil).SimpleReq), arg0, arg1, arg2)
}

// TimeoutDur mocks base method.
func (m *MockAPI) TimeoutDur() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeoutDur")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TimeoutDur indicates an expected call of TimeoutDur.
func (mr *MockAPIMockRecorder) TimeoutDur() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeoutDur", reflect.TypeOf((*MockAPI)(nil).TimeoutDur))
}
