// Code generated by counterfeiter.
package securityspy

import (
	"net/http"
	"net/url"
	"sync"
	"time"
)

type fakeApi struct {
	secReqStub        func(string, url.Values, time.Duration) (*http.Response, error)
	secReqMutex       sync.RWMutex
	secReqArgsForCall []struct {
		arg1 string
		arg2 url.Values
		arg3 time.Duration
	}
	secReqReturns struct {
		result1 *http.Response
		result2 error
	}
	secReqReturnsOnCall map[int]struct {
		result1 *http.Response
		result2 error
	}
	secReqXMLStub        func(string, url.Values) ([]byte, error)
	secReqXMLMutex       sync.RWMutex
	secReqXMLArgsForCall []struct {
		arg1 string
		arg2 url.Values
	}
	secReqXMLReturns struct {
		result1 []byte
		result2 error
	}
	secReqXMLReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	simpleReqStub        func(string, url.Values, int) error
	simpleReqMutex       sync.RWMutex
	simpleReqArgsForCall []struct {
		arg1 string
		arg2 url.Values
		arg3 int
	}
	simpleReqReturns struct {
		result1 error
	}
	simpleReqReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeApi) secReq(arg1 string, arg2 url.Values, arg3 time.Duration) (*http.Response, error) {
	fake.secReqMutex.Lock()
	ret, specificReturn := fake.secReqReturnsOnCall[len(fake.secReqArgsForCall)]
	fake.secReqArgsForCall = append(fake.secReqArgsForCall, struct {
		arg1 string
		arg2 url.Values
		arg3 time.Duration
	}{arg1, arg2, arg3})
	fake.recordInvocation("secReq", []interface{}{arg1, arg2, arg3})
	fake.secReqMutex.Unlock()
	if fake.secReqStub != nil {
		return fake.secReqStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.secReqReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *fakeApi) SecReqCallCount() int {
	fake.secReqMutex.RLock()
	defer fake.secReqMutex.RUnlock()
	return len(fake.secReqArgsForCall)
}

func (fake *fakeApi) SecReqCalls(stub func(string, url.Values, time.Duration) (*http.Response, error)) {
	fake.secReqMutex.Lock()
	defer fake.secReqMutex.Unlock()
	fake.secReqStub = stub
}

func (fake *fakeApi) SecReqArgsForCall(i int) (string, url.Values, time.Duration) {
	fake.secReqMutex.RLock()
	defer fake.secReqMutex.RUnlock()
	argsForCall := fake.secReqArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *fakeApi) SecReqReturns(result1 *http.Response, result2 error) {
	fake.secReqMutex.Lock()
	defer fake.secReqMutex.Unlock()
	fake.secReqStub = nil
	fake.secReqReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *fakeApi) SecReqReturnsOnCall(i int, result1 *http.Response, result2 error) {
	fake.secReqMutex.Lock()
	defer fake.secReqMutex.Unlock()
	fake.secReqStub = nil
	if fake.secReqReturnsOnCall == nil {
		fake.secReqReturnsOnCall = make(map[int]struct {
			result1 *http.Response
			result2 error
		})
	}
	fake.secReqReturnsOnCall[i] = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *fakeApi) secReqXML(arg1 string, arg2 url.Values) ([]byte, error) {
	fake.secReqXMLMutex.Lock()
	ret, specificReturn := fake.secReqXMLReturnsOnCall[len(fake.secReqXMLArgsForCall)]
	fake.secReqXMLArgsForCall = append(fake.secReqXMLArgsForCall, struct {
		arg1 string
		arg2 url.Values
	}{arg1, arg2})
	fake.recordInvocation("secReqXML", []interface{}{arg1, arg2})
	fake.secReqXMLMutex.Unlock()
	if fake.secReqXMLStub != nil {
		return fake.secReqXMLStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.secReqXMLReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *fakeApi) SecReqXMLCallCount() int {
	fake.secReqXMLMutex.RLock()
	defer fake.secReqXMLMutex.RUnlock()
	return len(fake.secReqXMLArgsForCall)
}

func (fake *fakeApi) SecReqXMLCalls(stub func(string, url.Values) ([]byte, error)) {
	fake.secReqXMLMutex.Lock()
	defer fake.secReqXMLMutex.Unlock()
	fake.secReqXMLStub = stub
}

func (fake *fakeApi) SecReqXMLArgsForCall(i int) (string, url.Values) {
	fake.secReqXMLMutex.RLock()
	defer fake.secReqXMLMutex.RUnlock()
	argsForCall := fake.secReqXMLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *fakeApi) SecReqXMLReturns(result1 []byte, result2 error) {
	fake.secReqXMLMutex.Lock()
	defer fake.secReqXMLMutex.Unlock()
	fake.secReqXMLStub = nil
	fake.secReqXMLReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *fakeApi) SecReqXMLReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.secReqXMLMutex.Lock()
	defer fake.secReqXMLMutex.Unlock()
	fake.secReqXMLStub = nil
	if fake.secReqXMLReturnsOnCall == nil {
		fake.secReqXMLReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.secReqXMLReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *fakeApi) simpleReq(arg1 string, arg2 url.Values, arg3 int) error {
	fake.simpleReqMutex.Lock()
	ret, specificReturn := fake.simpleReqReturnsOnCall[len(fake.simpleReqArgsForCall)]
	fake.simpleReqArgsForCall = append(fake.simpleReqArgsForCall, struct {
		arg1 string
		arg2 url.Values
		arg3 int
	}{arg1, arg2, arg3})
	fake.recordInvocation("simpleReq", []interface{}{arg1, arg2, arg3})
	fake.simpleReqMutex.Unlock()
	if fake.simpleReqStub != nil {
		return fake.simpleReqStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.simpleReqReturns
	return fakeReturns.result1
}

func (fake *fakeApi) SimpleReqCallCount() int {
	fake.simpleReqMutex.RLock()
	defer fake.simpleReqMutex.RUnlock()
	return len(fake.simpleReqArgsForCall)
}

func (fake *fakeApi) SimpleReqCalls(stub func(string, url.Values, int) error) {
	fake.simpleReqMutex.Lock()
	defer fake.simpleReqMutex.Unlock()
	fake.simpleReqStub = stub
}

func (fake *fakeApi) SimpleReqArgsForCall(i int) (string, url.Values, int) {
	fake.simpleReqMutex.RLock()
	defer fake.simpleReqMutex.RUnlock()
	argsForCall := fake.simpleReqArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *fakeApi) SimpleReqReturns(result1 error) {
	fake.simpleReqMutex.Lock()
	defer fake.simpleReqMutex.Unlock()
	fake.simpleReqStub = nil
	fake.simpleReqReturns = struct {
		result1 error
	}{result1}
}

func (fake *fakeApi) SimpleReqReturnsOnCall(i int, result1 error) {
	fake.simpleReqMutex.Lock()
	defer fake.simpleReqMutex.Unlock()
	fake.simpleReqStub = nil
	if fake.simpleReqReturnsOnCall == nil {
		fake.simpleReqReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.simpleReqReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *fakeApi) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.secReqMutex.RLock()
	defer fake.secReqMutex.RUnlock()
	fake.secReqXMLMutex.RLock()
	defer fake.secReqXMLMutex.RUnlock()
	fake.simpleReqMutex.RLock()
	defer fake.simpleReqMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *fakeApi) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
